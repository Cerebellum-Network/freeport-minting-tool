package nft.freeport.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Freeport extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b506142b0806100206000396000f3fe6080604052600436106102015760003560e01c8062fdd58e1461020657806301ffc9a71461023957806305b7cdd3146102695780630e89341c1461028b578063248a9ca3146102b85780632c8f284c146102d85780632e1a7d4d146102f85780632eb2c2d6146103185780632f2ff15d1461033857806330b064211461035857806336568abe1461036d5780633659cfe61461038d57806339b276f4146103ad5780633c6b5709146103cd578063448588e3146103ed5780634559a29b1461040f5780634880d2471461043d5780634e1273f41461045d5780634f1ef2861461048a5780635611cac21461049d578063572b6c05146104ca57806358556fb0146104ea5780635c5d67881461050a57806360e3ecd01461052a5780638129fc1c1461054c57806391d14854146105615780639a86e8ce146105815780639e00bb96146105a3578063a217fddf146105c3578063a22cb465146105d8578063a5e1fcd7146105f8578063ac71045e14610618578063acc08fa51461065c578063ad09608a146106a5578063b6b55f25146106c5578063b95812f4146106e5578063ba7f4dfe14610706578063bb3bafd614610726578063c29a6fda146107ac578063d547741f146107cc578063e1f1c4a7146107ec578063e24b0a2b14610802578063e985e9c514610842578063f242432a14610862578063f5361219146105c3575b600080fd5b34801561021257600080fd5b5061022661022136600461382c565b610882565b6040519081526020015b60405180910390f35b34801561024557600080fd5b506102596102543660046139ef565b61091e565b6040519015158152602001610230565b34801561027557600080fd5b50610289610284366004613a89565b610938565b005b34801561029757600080fd5b506102ab6102a63660046139b5565b6109a4565b6040516102309190613d60565b3480156102c457600080fd5b506102266102d33660046139b5565b610a38565b3480156102e457600080fd5b506102266102f3366004613626565b610a4d565b34801561030457600080fd5b506102896103133660046139b5565b610ae7565b34801561032457600080fd5b50610289610333366004613658565b610b89565b34801561034457600080fd5b506102896103533660046139cd565b610e7e565b34801561036457600080fd5b50610226600a81565b34801561037957600080fd5b506102896103883660046139cd565b610ea2565b34801561039957600080fd5b506102896103a836600461360c565b610f30565b3480156103b957600080fd5b506102896103c8366004613a89565b610f57565b3480156103d957600080fd5b506102266103e836600461388d565b611042565b3480156103f957600080fd5b5061022660008051602061422883398151915281565b34801561041b57600080fd5b5061042f61042a36600461382c565b611073565b604051610230929190613cd5565b34801561044957600080fd5b5061028961045836600461375f565b6110ba565b34801561046957600080fd5b5061047d6104783660046138d9565b611263565b6040516102309190613d28565b6102896104983660046137e1565b6113c4565b3480156104a957600080fd5b506104bd6104b83660046138d9565b6113d9565b6040516102309190613c1e565b3480156104d657600080fd5b506102596104e536600461360c565b611412565b3480156104f657600080fd5b50610226610505366004613aaa565b61142c565b34801561051657600080fd5b50610226610525366004613855565b611440565b34801561053657600080fd5b506102266000805160206141e883398151915281565b34801561055857600080fd5b506102896114d8565b34801561056d57600080fd5b5061025961057c3660046139cd565b61154b565b34801561058d57600080fd5b506102266000805160206141c883398151915281565b3480156105af57600080fd5b506102266105be366004613626565b611576565b3480156105cf57600080fd5b50610226600081565b3480156105e457600080fd5b506102896105f33660046137ab565b6115b7565b34801561060457600080fd5b5061028961061336600461360c565b6116cb565b34801561062457600080fd5b5061022661063336600461382c565b6001600160a01b0391909116600090815261013760209081526040808320938352929052205490565b34801561066857600080fd5b5061069061067736600461360c565b61012e6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610230565b3480156106b157600080fd5b506102896106c0366004613a27565b611784565b3480156106d157600080fd5b506102896106e03660046139b5565b6119af565b3480156106f157600080fd5b5061012d546104bd906001600160a01b031681565b34801561071257600080fd5b506104bd6107213660046138d9565b611a65565b34801561073257600080fd5b5061079a6107413660046139b5565b6000908152610130602090815260408083205461013183528184205461013284528285205461013385528386205461013486528487205461013590965293909520546001600160a01b0392831696919594929093169290565b60405161023096959493929190613cee565b3480156107b857600080fd5b506102896107c736600461360c565b611d81565b3480156107d857600080fd5b506102896107e73660046139cd565b611dd1565b3480156107f857600080fd5b5061022661271081565b34801561080e57600080fd5b5061082261081d3660046139cd565b611df0565b604080519485526020850193909352918301526060820152608001610230565b34801561084e57600080fd5b5061025961085d366004613626565b611efc565b34801561086e57600080fd5b5061028961087d3660046136fd565b611f51565b60006001600160a01b0383166108f35760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b60006109298261211b565b8061091857506109188261216b565b6000610942612190565b6001600160a01b038116600081815261013760209081526040808320888452825291829020869055905185815292935085927f040259e2f9c7930380b3a5c979ad8a30ecf8d344d3bcdb149e2c454ab85fcd8f910160405180910390a3505050565b606060cb80546109b390613fee565b80601f01602080910402602001604051908101604052809291908181526020018280546109df90613fee565b8015610a2c5780601f10610a0157610100808354040283529160200191610a2c565b820191906000526020600020905b815481529060010190602001808311610a0f57829003601f168201915b50505050509050919050565b600090815260fb602052604090206001015490565b6001600160a01b038216600090815261012f60205260408120815b8154811015610adc576000828281548110610a9357634e487b7160e01b600052603260045260246000fd5b6000918252602090912060029091020180549091506001600160a01b0386811691161415610ac957600101549250610918915050565b5080610ad481614055565b915050610a68565b506000949350505050565b6000610af1612190565b9050610aff8160008461219f565b61012d5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610b329084908690600401613cd5565b602060405180830381600087803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190613999565b505050565b8151835114610beb5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108ea565b6001600160a01b038416610c115760405162461bcd60e51b81526004016108ea90613dbb565b610c19612190565b6001600160a01b0316856001600160a01b03161480610c3f5750610c3f8561085d612190565b610ca65760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016108ea565b6000610cb0612190565b9050610cc0818787878787612322565b60005b8451811015610e10576000858281518110610cee57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610d1a57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260c9835260408082206001600160a01b038e168352909352919091205490915081811015610d6b5760405162461bcd60e51b81526004016108ea90613e9a565b610d758282613f94565b60c9600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160c9600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610df59190613f15565b9250508190555050505080610e0990614055565b9050610cc3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e60929190613d3b565b60405180910390a4610e7681878787878761239a565b505050505050565b610e8782610a38565b610e9881610e93612190565b612505565b610b848383612569565b610eaa612190565b6001600160a01b0316816001600160a01b031614610f225760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108ea565b610f2c82826125f0565b5050565b610f3981612675565b610f54816040518060200160405280600081525060006126b9565b50565b6000610f61612190565b9050610f6d8184612835565b610f7657600080fd5b600083815261013660205260409020548211610fef5760405162461bcd60e51b815260206004820152603260248201527f526f79616c7469657320636f6e66696775726174696f6e2063616e6e6f74206260448201527132903ab73637b1b5b2b21032b0b93634b2b960711b60648201526084016108ea565b60008381526101366020526040908190208390555183907f7bdd35d2167385bdbed0892e34b48298770ffce27fe71928c767071865f51544906110359085815260200190565b60405180910390a2505050565b6001600160601b0319606084901b1663ffffffff60401b604084901b16176001600160401b038216175b9392505050565b61012f602052816000526040600020818154811061109057600080fd5b6000918252602090912060029091020180546001909101546001600160a01b039091169250905082565b6001600160a01b0384166000908152610137602090815260408083208684529091529020548061111b5760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b60448201526064016108ea565b82158061112757508083145b6111665760405162461bcd60e51b815260206004820152601060248201526f556e657870656374656420707269636560801b60448201526064016108ea565b60006111728383613f75565b9050611191878760008460405180602001604052806000815250611f51565b600061119f87878587612848565b9050818111156111ff5760405162461bcd60e51b815260206004820152602560248201527f43616e6e6f742074616b65206d6f72652066656573207468616e2074686520706044820152643934b1b29760d91b60648201526084016108ea565b61120b87898887612957565b85876001600160a01b0316896001600160a01b03167fe90359125940e7c9b26005d19d4d8a2a5335ea8bef094bcd61bb8f8091cad1178688604051611251929190613ee4565b60405180910390a45050505050505050565b606081518351146112c85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016108ea565b600083516001600160401b038111156112f157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561131a578160200160208202803683370190505b50905060005b84518110156113bc5761138185828151811061134c57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061137457634e487b7160e01b600052603260045260246000fd5b6020026020010151610882565b8282815181106113a157634e487b7160e01b600052603260045260246000fd5b60209081029190910101526113b581614055565b9050611320565b509392505050565b6113cd82612675565b610f2c828260016126b9565b60008083836040516020016113ef929190613b2b565b60408051808303601f19018152919052805160209091012060601c949350505050565b60006109186000805160206141c88339815191528361154b565b600061106c611439612190565b8484612a41565b60008061144b612190565b90506114578682611efc565b6114c05760405162461bcd60e51b815260206004820152603460248201527f746865206f70657261746f72206d75737420626520617070726f766564206f726044820152731030902a2920a729a322a92fa7a822a920aa27a960611b60648201526084016108ea565b6114cc86868686612848565b9150505b949350505050565b600054610100900460ff16806114f1575060005460ff16155b61150d5760405162461bcd60e51b81526004016108ea90613e4c565b600054610100900460ff1615801561152f576000805461ffff19166101011790555b611537612adf565b8015610f54576000805461ff001916905550565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806115838484610a4d565b90506000611592856000610882565b905060006127106115a38484613f75565b6115ad9190613f55565b9695505050505050565b816001600160a01b03166115c9612190565b6001600160a01b031614156116325760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016108ea565b8060ca600061163f612190565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611683612190565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116bf911515815260200190565b60405180910390a35050565b60006116d8826000610882565b6001600160a01b038316600090815261012f602052604081209192505b815481101561177e57600082828154811061172057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905060006127108260010154866117459190613f75565b61174f9190613f55565b82549091506117699087906001600160a01b031683612ae9565b5050808061177690614055565b9150506116f5565b50505050565b600061178e612190565b905061179a8189612835565b6117fc5760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c792074686520697373756572206f662074686973204e46542063616e2060448201526c73657420726f79616c7469657360981b60648201526084016108ea565b6000888152610136602052604090205442101561186d5760405162461bcd60e51b815260206004820152602960248201527f526f79616c7469657320636f6e66696775726174696f6e206973206c6f636b656044820152686420666f72206e6f7760b81b60648201526084016108ea565b6001600160a01b03871615158061188b57508515801561188b575084155b6118a75760405162461bcd60e51b81526004016108ea90613e00565b60008881526101306020908152604080832080546001600160a01b0319166001600160a01b038c81169190911790915561013183528184208a90556101329092529091208690558416151580611904575082158015611904575081155b6119205760405162461bcd60e51b81526004016108ea90613e00565b60008881526101336020908152604080832080546001600160a01b0319166001600160a01b0389161790556101348252808320869055610135909152908190208390555188907f3df2272e42784a2455bbbdcdf25ae0f67d41f801896514cc4cd255aa8ee75e4c9061199d908a908a908a908a908a908a90613cee565b60405180910390a25050505050505050565b60006119b9612190565b61012d546040516323b872dd60e01b81526001600160a01b038084166004830152306024830152604482018690529293509116906323b872dd90606401602060405180830381600087803b158015611a1057600080fd5b505af1158015611a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a489190613999565b50610f2c8160008460405180602001604052806000815250612bcc565b60008151835114611ad95760405162461bcd60e51b815260206004820152603860248201527f417272617973206f66206f776e65727320616e64206672616374696f6e73206d6044820152770eae6e840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60431b60648201526084016108ea565b600a83511115611b1d5760405162461bcd60e51b815260206004820152600f60248201526e546f6f206d616e792073686172657360881b60448201526064016108ea565b6000611b2984846113d9565b6001600160a01b038116600090815261012f6020526040902080549192509015611b925760405162461bcd60e51b815260206004820152601a602482015279546865206163636f756e7420616c72656164792065786973747360301b60448201526064016108ea565b6000805b8651811015611d25576000878281518110611bc157634e487b7160e01b600052603260045260246000fd5b602002602001015190506000878381518110611bed57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316826001600160a01b031614158015611c1957508015155b611c625760405162461bcd60e51b815260206004820152601a6024820152790c081d985b1d595cc8185c99481b9bdd081c195c9b5a5d1d195960321b60448201526064016108ea565b604080518082019091526001600160a01b0383811682526020808301848152885460018082018b5560008b8152939093209451600290910290940180546001600160a01b031916949093169390931782559151910155611cc28185613f15565b9350816001600160a01b0316866001600160a01b03167e6fb9851f1fd2fbc9fa36680d17e1254999a38e5f3c76c3a1ecc126a464601b83604051611d0891815260200190565b60405180910390a350508080611d1d90614055565b915050611b96565b506127108114611d775760405162461bcd60e51b815260206004820152601e60248201527f546f74616c206672616374696f6e73206d7573742062652031302c303030000060448201526064016108ea565b5090949350505050565b61012d546001600160a01b031615611d9857600080fd5b611da5600061057c612190565b611dae57600080fd5b61012d80546001600160a01b0319166001600160a01b0392909216919091179055565b611dda82610a38565b611de681610e93612190565b610b8483836125f0565b600082815261013160209081526040808320546101328352818420546101309093529083205490929081906001600160a01b039081169086168114611e71576000611e3b8288610a4d565b9050612710611e4a8288613f75565b611e549190613f55565b9550612710611e638287613f75565b611e6d9190613f55565b9450505b6000878152610134602090815260408083205461013583528184205461013390935292205491945092506001600160a01b039081169087168114611ef1576000611ebb8289610a4d565b9050612710611eca8287613f75565b611ed49190613f55565b9450612710611ee38286613f75565b611eed9190613f55565b9350505b505092959194509250565b6000611f166000805160206141e88339815191528361154b565b15611f2357506001610918565b6001600160a01b03808416600090815260ca602090815260408083209386168352929052205460ff1661106c565b6001600160a01b038416611f775760405162461bcd60e51b81526004016108ea90613dbb565b611f7f612190565b6001600160a01b0316856001600160a01b03161480611fa55750611fa58561085d612190565b6120035760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016108ea565b600061200d612190565b905061202d81878761201e88612cd6565b61202788612cd6565b87612322565b600084815260c9602090815260408083206001600160a01b038a168452909152902054838110156120705760405162461bcd60e51b81526004016108ea90613e9a565b61207a8482613f94565b600086815260c9602090815260408083206001600160a01b038c811685529252808320939093558816815290812080548692906120b8908490613f15565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b031660008051602061416183398151915288886040516120fc929190613ee4565b60405180910390a4612112828888888888612d2f565b50505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061214c57506001600160e01b031982166303a24d0760e21b145b8061091857506301ffc9a760e01b6001600160e01b0319831614610918565b60006001600160e01b03198216637965db0b60e01b148061091857506109188261211b565b600061219a612df9565b905090565b6001600160a01b0383166122015760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016108ea565b600061220b612190565b905061223b8185600061221d87612cd6565b61222687612cd6565b60405180602001604052806000815250612322565b600083815260c9602090815260408083206001600160a01b0388168452909152902054828110156122ba5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016108ea565b6122c48382613f94565b600085815260c9602090815260408083206001600160a01b03808b1680865291909352818420949094555191929190851690600080516020614161833981519152906123139089908990613ee4565b60405180910390a45050505050565b60005b8351811015612112576123898685838151811061235257634e487b7160e01b600052603260045260246000fd5b6020026020010151600086858151811061237c57634e487b7160e01b600052603260045260246000fd5b6020026020010151612848565b5061239381614055565b9050612325565b6001600160a01b0384163b15610e765760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906123de9089908990889088908890600401613c32565b602060405180830381600087803b1580156123f857600080fd5b505af1925050508015612428575060408051601f3d908101601f1916820190925261242591810190613a0b565b60015b6124d55761243461409c565b806308c379a0141561246e57506124496140b3565b806124545750612470565b8060405162461bcd60e51b81526004016108ea9190613d60565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016108ea565b6001600160e01b0319811663bc197c8160e01b146121125760405162461bcd60e51b81526004016108ea90613d73565b61250f828261154b565b610f2c57612527816001600160a01b03166014612e1e565b612532836020612e1e565b604051602001612543929190613baf565b60408051601f198184030181529082905262461bcd60e51b82526108ea91600401613d60565b612573828261154b565b610f2c57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125ac612190565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6125fa828261154b565b15610f2c57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19169055612631612190565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b61268060003361154b565b610f545760405162461bcd60e51b815260206004820152600a60248201526927b7363c9020b236b4b760b11b60448201526064016108ea565b60006126c3612fff565b90506126ce8461301b565b6000835111806126db5750815b156126ec576126ea84846130ae565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661282e57805460ff19166001178155604051612767908690612738908590602401613c1e565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526130ae565b50805460ff19168155612778612fff565b6001600160a01b0316826001600160a01b0316146127f05760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016108ea565b6127f98561301b565b6040516001600160a01b038616907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a25b5050505050565b60601c6001600160a01b03919091161490565b600083612857575060006114d0565b61286f6000805160206142288339815191523361154b565b1561287c575060006114d0565b60008060008061288c8989612835565b905080156128ce576000888152610131602090815260408083205461013283528184205461013090935292205491955093506001600160a01b03169150612904565b6000888152610134602090815260408083205461013583528184205461013390935292205491955093506001600160a01b031691505b6000612710612913868a613f75565b61291d9190613f55565b90508381101561292a5750825b60006129368883613f75565b90508015612949576129498b8583612ae9565b9a9950505050505050505050565b600082815260c9602090815260408083206001600160a01b03881684529091529020548181101561299a5760405162461bcd60e51b81526004016108ea90613e9a565b6129a48282613f94565b600084815260c9602090815260408083206001600160a01b038a811685529252808320939093558616815290812080548492906129e2908490613f15565b90915550600090506129f2612190565b9050846001600160a01b0316866001600160a01b0316826001600160a01b03166000805160206141618339815191528787604051612a31929190613ee4565b60405180910390a4505050505050565b6001600160a01b038316600090815261012e602052604081205463ffffffff16612a6c816001613f2d565b6001600160a01b038616600090815261012e60205260408120805463ffffffff191663ffffffff9390931692909217909155612aa9868387611042565b90506000856001600160401b031611612ac157600080fd5b612ad68682876001600160401b031687612bcc565b95945050505050565b612ae7613190565b565b6001600160a01b0383166000908152600080516020614208833981519152602052604090205481811015612b2f5760405162461bcd60e51b81526004016108ea90613e9a565b612b398282613f94565b6001600160a01b03858116600090815260008051602061420883398151915260205260408082209390935590851681529081208054849290612b7c908490613f15565b9091555060009050612b8c612190565b9050836001600160a01b0316856001600160a01b0316826001600160a01b0316600080516020614161833981519152600087604051612313929190613ee4565b6001600160a01b038416612c2c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016108ea565b6000612c36612190565b9050612c488160008761201e88612cd6565b600084815260c9602090815260408083206001600160a01b038916845290915281208054859290612c7a908490613f15565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03166000805160206141618339815191528787604051612cbf929190613ee4565b60405180910390a461282e81600087878787612d2f565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612d1e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610e765760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612d739089908990889088908890600401613c90565b602060405180830381600087803b158015612d8d57600080fd5b505af1925050508015612dbd575060408051601f3d908101601f19168201909252612dba91810190613a0b565b60015b612dc95761243461409c565b6001600160e01b0319811663f23a6e6160e01b146121125760405162461bcd60e51b81526004016108ea90613d73565b6000612e0433611412565b15612e16575060131936013560601c90565b503390565b90565b60606000612e2d836002613f75565b612e38906002613f15565b6001600160401b03811115612e5d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e87576020820181803683370190505b509050600360fc1b81600081518110612eb057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612eed57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612f11846002613f75565b612f1c906001613f15565b90505b6001811115612fb0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612f5e57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612f8257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612fa981613fd7565b9050612f1f565b50831561106c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108ea565b600080516020614181833981519152546001600160a01b031690565b803b61307f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108ea565b60008051602061418183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61310d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016108ea565b600080846001600160a01b0316846040516131289190613b93565b600060405180830381855af49150503d8060008114613163576040519150601f19603f3d011682016040523d82523d6000602084013e613168565b606091505b5091509150612ad682826040518060600160405280602781526020016141a160279139613198565b612ae76131d1565b606083156131a757508161106c565b8251156131b75782518084602001fd5b8160405162461bcd60e51b81526004016108ea9190613d60565b612ae7612ae7612ae7612ae7612ae761320160405180606001604052806033815260200161424860339139613209565b612ae761328e565b600054610100900460ff1680613222575060005460ff16155b61323e5760405162461bcd60e51b81526004016108ea90613e4c565b600054610100900460ff16158015613260576000805461ffff19166101011790555b613268613296565b613270613296565b61327982613300565b8015610f2c576000805461ff00191690555050565b612ae7613360565b600054610100900460ff16806132af575060005460ff16155b6132cb5760405162461bcd60e51b81526004016108ea90613e4c565b600054610100900460ff16158015611537576000805461ffff19166101011790558015610f54576000805461ff001916905550565b600054610100900460ff1680613319575060005460ff16155b6133355760405162461bcd60e51b81526004016108ea90613e4c565b600054610100900460ff16158015613357576000805461ffff19166101011790555b6132798261337b565b61336861338e565b6133706133f5565b612ae7600033613454565b8051610f2c9060cb90602084019061345e565b600054610100900460ff16806133a7575060005460ff16155b6133c35760405162461bcd60e51b81526004016108ea90613e4c565b600054610100900460ff161580156133e5576000805461ffff19166101011790555b6133ed613296565b611537613296565b600054610100900460ff168061340e575060005460ff16155b61342a5760405162461bcd60e51b81526004016108ea90613e4c565b600054610100900460ff1615801561344c576000805461ffff19166101011790555b6133e5613296565b610f2c8282612569565b82805461346a90613fee565b90600052602060002090601f01602090048101928261348c57600085556134d2565b82601f106134a557805160ff19168380011785556134d2565b828001600101855582156134d2579182015b828111156134d25782518255916020019190600101906134b7565b506134de9291506134e2565b5090565b5b808211156134de57600081556001016134e3565b80356001600160a01b038116811461350e57600080fd5b919050565b600082601f830112613523578081fd5b8135602061353082613ef2565b60405161353d8282614029565b8381528281019150858301600585901b8701840188101561355c578586fd5b855b8581101561357a5781358452928401929084019060010161355e565b5090979650505050505050565b600082601f830112613597578081fd5b81356001600160401b038111156135b0576135b0614086565b6040516135c7601f8301601f191660200182614029565b8181528460208386010111156135db578283fd5b816020850160208301379081016020019190915292915050565b80356001600160401b038116811461350e57600080fd5b60006020828403121561361d578081fd5b61106c826134f7565b60008060408385031215613638578081fd5b613641836134f7565b915061364f602084016134f7565b90509250929050565b600080600080600060a0868803121561366f578081fd5b613678866134f7565b9450613686602087016134f7565b935060408601356001600160401b03808211156136a1578283fd5b6136ad89838a01613513565b945060608801359150808211156136c2578283fd5b6136ce89838a01613513565b935060808801359150808211156136e3578283fd5b506136f088828901613587565b9150509295509295909350565b600080600080600060a08688031215613714578081fd5b61371d866134f7565b945061372b602087016134f7565b9350604086013592506060860135915060808601356001600160401b03811115613753578182fd5b6136f088828901613587565b600080600080600060a08688031215613776578081fd5b61377f866134f7565b945061378d602087016134f7565b94979496505050506040830135926060810135926080909101359150565b600080604083850312156137bd578182fd5b6137c6836134f7565b915060208301356137d68161413c565b809150509250929050565b600080604083850312156137f3578081fd5b6137fc836134f7565b915060208301356001600160401b03811115613816578182fd5b61382285828601613587565b9150509250929050565b6000806040838503121561383e578182fd5b613847836134f7565b946020939093013593505050565b6000806000806080858703121561386a578182fd5b613873856134f7565b966020860135965060408601359560600135945092505050565b6000806000606084860312156138a1578081fd5b6138aa846134f7565b9250602084013563ffffffff811681146138c2578182fd5b91506138d0604085016135f5565b90509250925092565b600080604083850312156138eb578182fd5b82356001600160401b0380821115613901578384fd5b818501915085601f830112613914578384fd5b8135602061392182613ef2565b60405161392e8282614029565b8381528281019150858301600585901b870184018b101561394d578889fd5b8896505b8487101561397657613962816134f7565b835260019690960195918301918301613951565b509650508601359250508082111561398c578283fd5b5061382285828601613513565b6000602082840312156139aa578081fd5b815161106c8161413c565b6000602082840312156139c6578081fd5b5035919050565b600080604083850312156139df578182fd5b8235915061364f602084016134f7565b600060208284031215613a00578081fd5b813561106c8161414a565b600060208284031215613a1c578081fd5b815161106c8161414a565b600080600080600080600060e0888a031215613a41578485fd5b87359650613a51602089016134f7565b95506040880135945060608801359350613a6d608089016134f7565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215613a9b578182fd5b50508035926020909101359150565b60008060408385031215613abc578182fd5b6137fc836135f5565b6000815180845260208085019450808401835b83811015613af457815187529582019590820190600101613ad8565b509495945050505050565b60008151808452613b17816020860160208601613fab565b601f01601f19169290920160200192915050565b825160009082906020808701845b83811015613b5e5781516001600160a01b031685529382019390820190600101613b39565b50508551818701939250845b81811015613b8657845184529382019392820192600101613b6a565b5091979650505050505050565b60008251613ba5818460208701613fab565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351613be1816017850160208801613fab565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613c12816028840160208801613fab565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a060408201819052600090613c5e90830186613ac5565b8281036060840152613c708186613ac5565b90508281036080840152613c848185613aff565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613cca90830184613aff565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0396871681526020810195909552604085019390935293166060830152608082019290925260a081019190915260c00190565b60208152600061106c6020830184613ac5565b604081526000613d4e6040830185613ac5565b8281036020840152612ad68185613ac5565b60208152600061106c6020830184613aff565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602c908201527f546865206163636f756e74206d757374206e6f7420626520302c20756e6c657360408201526b07320666565732061726520360a41b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b918252602082015260400190565b60006001600160401b03821115613f0b57613f0b614086565b5060051b60200190565b60008219821115613f2857613f28614070565b500190565b600063ffffffff808316818516808303821115613f4c57613f4c614070565b01949350505050565b600082613f7057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613f8f57613f8f614070565b500290565b600082821015613fa657613fa6614070565b500390565b60005b83811015613fc6578181015183820152602001613fae565b8381111561177e5750506000910152565b600081613fe657613fe6614070565b506000190190565b600181811c9082168061400257607f821691505b6020821081141561402357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b038111828210171561404e5761404e614086565b6040525050565b600060001982141561406957614069614070565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612e1b57600481823e5160e01c90565b600060443d10156140c15790565b6040516003193d81016004833e81513d6001600160401b0380831160248401831017156140f057505050505090565b82850191508151818111156141085750505050505090565b843d87010160208285010111156141225750505050505090565b61413160208286010187614029565b509095945050505050565b8015158114610f5457600080fd5b6001600160e01b031981168114610f5457600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65643d2e894c222ba979e2dce2c7d940c0e9bb14306669e9f034eb1bb3979a2069d8626f510646502d065065e8bd550325973a611a32e6f6ddff40650005cb13636881fe90a866a48a634a12852c1be675b683a22307409932a7443b8029347be75620a4be6e7127e439f48d6654377d19402cb883dd85029e600de9e17052f903d368747470733a2f2f6170692e66726565706f72742e636572652e6e6574776f726b2f657263313135352f7b69647d2e6a736f6ea2646970667358221220ca6944bdaa5a90289122e530afef85a83bb01e833b55fc1206318686a55180eb64736f6c63430008040033";

    public static final String FUNC_BASIS_POINTS = "BASIS_POINTS";

    public static final String FUNC_BYPASS_SENDER = "BYPASS_SENDER";

    public static final String FUNC_CURRENCY = "CURRENCY";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MAX_JOINT_ACCOUNT_SHARES = "MAX_JOINT_ACCOUNT_SHARES";

    public static final String FUNC_META_TX_FORWARDER = "META_TX_FORWARDER";

    public static final String FUNC_TRANSFER_OPERATOR = "TRANSFER_OPERATOR";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BALANCEOFJAOWNER = "balanceOfJAOwner";

    public static final String FUNC_CAPTUREFEE = "captureFee";

    public static final String FUNC_CONFIGUREROYALTIES = "configureRoyalties";

    public static final String FUNC_CREATEJOINTACCOUNT = "createJointAccount";

    public static final String FUNC_CURRENCYCONTRACT = "currencyContract";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DISTRIBUTEJOINTACCOUNT = "distributeJointAccount";

    public static final String FUNC_FRACTIONOFJAOWNER = "fractionOfJAOwner";

    public static final String FUNC_GETNFTID = "getNftId";

    public static final String FUNC_GETOFFER = "getOffer";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROYALTIES = "getRoyalties";

    public static final String FUNC_GETROYALTIESFORBENEFICIARY = "getRoyaltiesForBeneficiary";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISTRUSTEDFORWARDER = "isTrustedForwarder";

    public static final String FUNC_ISSUANCENONCES = "issuanceNonces";

    public static final String FUNC_ISSUE = "issue";

    public static final String FUNC_JOINTACCOUNTS = "jointAccounts";

    public static final String FUNC_LOCKROYALTIES = "lockRoyalties";

    public static final String FUNC_MAKEADDRESSOFJOINTACCOUNT = "makeAddressOfJointAccount";

    public static final String FUNC_MAKEOFFER = "makeOffer";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETERC20 = "setERC20";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TAKEOFFER = "takeOffer";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final String FUNC_URI = "uri";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final Event ADMINCHANGED_EVENT = new Event("AdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BEACONUPGRADED_EVENT = new Event("BeaconUpgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event JOINTACCOUNTSHARECREATED_EVENT = new Event("JointAccountShareCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MAKEOFFER_EVENT = new Event("MakeOffer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROYALTIESCONFIGURED_EVENT = new Event("RoyaltiesConfigured", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROYALTIESLOCKED_EVENT = new Event("RoyaltiesLocked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TAKEOFFER_EVENT = new Event("TakeOffer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("80001", "0xacd8105cBA046307d2228794ba2F81aA15e82E0D");
        _addresses.put("137", "0xf9AC6022F786f6f64Fd8abf661190b8517D92396");
    }

    @Deprecated
    protected Freeport(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Freeport(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Freeport(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Freeport(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses = new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AdminChangedEventResponse>() {
            @Override
            public AdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADMINCHANGED_EVENT, log);
                AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.previousAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AdminChangedEventResponse> adminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINCHANGED_EVENT));
        return adminChangedEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses = new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeaconUpgradedEventResponse>() {
            @Override
            public BeaconUpgradedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BEACONUPGRADED_EVENT, log);
                BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeaconUpgradedEventResponse> beaconUpgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BEACONUPGRADED_EVENT));
        return beaconUpgradedEventFlowable(filter);
    }

    public List<JointAccountShareCreatedEventResponse> getJointAccountShareCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JOINTACCOUNTSHARECREATED_EVENT, transactionReceipt);
        ArrayList<JointAccountShareCreatedEventResponse> responses = new ArrayList<JointAccountShareCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JointAccountShareCreatedEventResponse typedResponse = new JointAccountShareCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.fraction = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<JointAccountShareCreatedEventResponse> jointAccountShareCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, JointAccountShareCreatedEventResponse>() {
            @Override
            public JointAccountShareCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(JOINTACCOUNTSHARECREATED_EVENT, log);
                JointAccountShareCreatedEventResponse typedResponse = new JointAccountShareCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.fraction = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<JointAccountShareCreatedEventResponse> jointAccountShareCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(JOINTACCOUNTSHARECREATED_EVENT));
        return jointAccountShareCreatedEventFlowable(filter);
    }

    public List<MakeOfferEventResponse> getMakeOfferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MAKEOFFER_EVENT, transactionReceipt);
        ArrayList<MakeOfferEventResponse> responses = new ArrayList<MakeOfferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MakeOfferEventResponse typedResponse = new MakeOfferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MakeOfferEventResponse> makeOfferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MakeOfferEventResponse>() {
            @Override
            public MakeOfferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MAKEOFFER_EVENT, log);
                MakeOfferEventResponse typedResponse = new MakeOfferEventResponse();
                typedResponse.log = log;
                typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MakeOfferEventResponse> makeOfferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MAKEOFFER_EVENT));
        return makeOfferEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<RoyaltiesConfiguredEventResponse> getRoyaltiesConfiguredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROYALTIESCONFIGURED_EVENT, transactionReceipt);
        ArrayList<RoyaltiesConfiguredEventResponse> responses = new ArrayList<RoyaltiesConfiguredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoyaltiesConfiguredEventResponse typedResponse = new RoyaltiesConfiguredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.primaryRoyaltyAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.primaryRoyaltyCut = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.primaryRoyaltyMinimum = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.secondaryRoyaltyAccount = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.secondaryRoyaltyCut = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.secondaryRoyaltyMinimum = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoyaltiesConfiguredEventResponse> royaltiesConfiguredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoyaltiesConfiguredEventResponse>() {
            @Override
            public RoyaltiesConfiguredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROYALTIESCONFIGURED_EVENT, log);
                RoyaltiesConfiguredEventResponse typedResponse = new RoyaltiesConfiguredEventResponse();
                typedResponse.log = log;
                typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.primaryRoyaltyAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.primaryRoyaltyCut = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.primaryRoyaltyMinimum = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.secondaryRoyaltyAccount = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.secondaryRoyaltyCut = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.secondaryRoyaltyMinimum = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoyaltiesConfiguredEventResponse> royaltiesConfiguredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROYALTIESCONFIGURED_EVENT));
        return royaltiesConfiguredEventFlowable(filter);
    }

    public List<RoyaltiesLockedEventResponse> getRoyaltiesLockedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROYALTIESLOCKED_EVENT, transactionReceipt);
        ArrayList<RoyaltiesLockedEventResponse> responses = new ArrayList<RoyaltiesLockedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoyaltiesLockedEventResponse typedResponse = new RoyaltiesLockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.lockUntil = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoyaltiesLockedEventResponse> royaltiesLockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoyaltiesLockedEventResponse>() {
            @Override
            public RoyaltiesLockedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROYALTIESLOCKED_EVENT, log);
                RoyaltiesLockedEventResponse typedResponse = new RoyaltiesLockedEventResponse();
                typedResponse.log = log;
                typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.lockUntil = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoyaltiesLockedEventResponse> royaltiesLockedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROYALTIESLOCKED_EVENT));
        return royaltiesLockedEventFlowable(filter);
    }

    public List<TakeOfferEventResponse> getTakeOfferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TAKEOFFER_EVENT, transactionReceipt);
        ArrayList<TakeOfferEventResponse> responses = new ArrayList<TakeOfferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TakeOfferEventResponse typedResponse = new TakeOfferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TakeOfferEventResponse> takeOfferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TakeOfferEventResponse>() {
            @Override
            public TakeOfferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TAKEOFFER_EVENT, log);
                TakeOfferEventResponse typedResponse = new TakeOfferEventResponse();
                typedResponse.log = log;
                typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.nftId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TakeOfferEventResponse> takeOfferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TAKEOFFER_EVENT));
        return takeOfferEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> BASIS_POINTS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASIS_POINTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> BYPASS_SENDER() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BYPASS_SENDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> CURRENCY() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURRENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> MAX_JOINT_ACCOUNT_SHARES() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_JOINT_ACCOUNT_SHARES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> META_TX_FORWARDER() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_META_TX_FORWARDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> TRANSFER_OPERATOR() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRANSFER_OPERATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> balanceOfJAOwner(String account, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFJAOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> captureFee(String from, BigInteger nftId, BigInteger price, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CAPTUREFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.generated.Uint256(nftId), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> configureRoyalties(BigInteger nftId, String primaryRoyaltyAccount, BigInteger primaryRoyaltyCut, BigInteger primaryRoyaltyMinimum, String secondaryRoyaltyAccount, BigInteger secondaryRoyaltyCut, BigInteger secondaryRoyaltyMinimum) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CONFIGUREROYALTIES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nftId), 
                new org.web3j.abi.datatypes.Address(primaryRoyaltyAccount), 
                new org.web3j.abi.datatypes.generated.Uint256(primaryRoyaltyCut), 
                new org.web3j.abi.datatypes.generated.Uint256(primaryRoyaltyMinimum), 
                new org.web3j.abi.datatypes.Address(secondaryRoyaltyAccount), 
                new org.web3j.abi.datatypes.generated.Uint256(secondaryRoyaltyCut), 
                new org.web3j.abi.datatypes.generated.Uint256(secondaryRoyaltyMinimum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createJointAccount(List<String> owners, List<BigInteger> fractions) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEJOINTACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(owners, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(fractions, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> currencyContract() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURRENCYCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> distributeJointAccount(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DISTRIBUTEJOINTACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> fractionOfJAOwner(String account, String maybeOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FRACTIONOFJAOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.Address(maybeOwner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getNftId(String issuer, BigInteger nonce, BigInteger supply) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNFTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(issuer), 
                new org.web3j.abi.datatypes.generated.Uint32(nonce), 
                new org.web3j.abi.datatypes.generated.Uint64(supply)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getOffer(String seller, BigInteger nftId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(seller), 
                new org.web3j.abi.datatypes.generated.Uint256(nftId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>> getRoyalties(BigInteger nftId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROYALTIES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nftId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getRoyaltiesForBeneficiary(BigInteger nftId, String beneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROYALTIESFORBENEFICIARY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nftId), 
                new org.web3j.abi.datatypes.Address(beneficiary)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isTrustedForwarder(String forwarder) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISTRUSTEDFORWARDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(forwarder)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> issuanceNonces(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSUANCENONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> issue(BigInteger supply, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(supply), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> jointAccounts(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_JOINTACCOUNTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> lockRoyalties(BigInteger nftId, BigInteger lockUntil) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCKROYALTIES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nftId), 
                new org.web3j.abi.datatypes.generated.Uint256(lockUntil)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> makeAddressOfJointAccount(List<String> owners, List<BigInteger> fractions) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAKEADDRESSOFJOINTACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(owners, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(fractions, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> makeOffer(BigInteger nftId, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MAKEOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nftId), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setERC20(String _currencyContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_currencyContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> takeOffer(String buyer, String seller, BigInteger nftId, BigInteger expectedPriceOrZero, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TAKEOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(buyer), 
                new org.web3j.abi.datatypes.Address(seller), 
                new org.web3j.abi.datatypes.generated.Uint256(nftId), 
                new org.web3j.abi.datatypes.generated.Uint256(expectedPriceOrZero), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Freeport load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Freeport(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Freeport load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Freeport(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Freeport load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Freeport(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Freeport load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Freeport(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Freeport> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Freeport.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Freeport> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Freeport.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Freeport> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Freeport.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Freeport> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Freeport.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AdminChangedEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class BeaconUpgradedEventResponse extends BaseEventResponse {
        public String beacon;
    }

    public static class JointAccountShareCreatedEventResponse extends BaseEventResponse {
        public String account;

        public String owner;

        public BigInteger fraction;
    }

    public static class MakeOfferEventResponse extends BaseEventResponse {
        public String seller;

        public BigInteger nftId;

        public BigInteger price;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoyaltiesConfiguredEventResponse extends BaseEventResponse {
        public BigInteger nftId;

        public String primaryRoyaltyAccount;

        public BigInteger primaryRoyaltyCut;

        public BigInteger primaryRoyaltyMinimum;

        public String secondaryRoyaltyAccount;

        public BigInteger secondaryRoyaltyCut;

        public BigInteger secondaryRoyaltyMinimum;
    }

    public static class RoyaltiesLockedEventResponse extends BaseEventResponse {
        public BigInteger nftId;

        public BigInteger lockUntil;
    }

    public static class TakeOfferEventResponse extends BaseEventResponse {
        public String buyer;

        public String seller;

        public BigInteger nftId;

        public BigInteger price;

        public BigInteger amount;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }
}
